generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  username      String      @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  phone         String
  location      String
  linkedin      String?
  telegram      String?
  instagram     String?
  portfolio     String?
  skill          String[]
  bio           String
  role          UserRole    @default(JOBSEEKER)
  
  education     Education[]
  work          Work[]
  project       Project[]
  accounts      Account[]
  sessions      Session[]
  notifications Notification[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}




enum AlertFrequency {
  REALTIME
  DAILY
  WEEKLY
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  read        Boolean   @default(false)
  data        Json?     // Additional data specific to notification type
  
  user        User      @relation(fields: [userId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId, read])
}

enum NotificationType {
  JOB_ALERT
  APPLICATION_UPDATE
  PROFILE_VIEW
  MESSAGE
  SYSTEM
}

enum UserRole {
  ADMIN
  EMPLOYER
  JOBSEEKER
}

model Job {
  id              String    @id @default(cuid())
  position        String
  description     String    @db.Text
  companyName     String
  employmentType  EmploymentType
  location        String
  locationType    LocationType @default(ONSITE)
  benefits        String[]
  tags            String[]
  salary          Json      
  email           String
  link            String?
  region          String[]
  status          JobStatus @default(ACTIVE)
  featured        Boolean   @default(false)
  apply           String    @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  expiresAt       DateTime?

  @@index([status])
  @@index([employmentType])
  @@index([locationType])
}

enum JobStatus {
  DRAFT
  ACTIVE
  CLOSED
  EXPIRED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum LocationType {
  REMOTE
  HYBRID
  ONSITE
}

// Users Model

model Education {
  id            String    @id @default(cuid())
  userId        String
  name          String
  location      String
  degree        String
  major         String
  startDate     DateTime
  endDate       DateTime?
  isCurrently   Boolean   @default(false)
  
  user          User      @relation(fields: [userId], references: [id])
}

model Work {
  id            String    @id @default(cuid())
  userId        String
  name          String
  position      String
  location      String
  startDate     DateTime
  endDate       DateTime?
  isCurrently   Boolean   @default(false)
  
  user          User      @relation(fields: [userId], references: [id])
}

model Project {
  id            String    @id @default(cuid())
  userId        String
  name          String
  description   String
  link          String?
  startDate     DateTime
  endDate       DateTime?
  isCurrently   Boolean   @default(false)
  user          User      @relation(fields: [userId], references: [id])
}