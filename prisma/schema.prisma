generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  phone         String
  location      String
  portfolio     String?
  role          UserRole    @default(JOBSEEKER)
  
  education     Education[]
  work          Work[]
  project       Project[]
  accounts      Account[]
  sessions      Session[]
  applications  JobApplication[]
  postedJobs    Job[]       @relation("JobPoster")
  savedJobs     Job[]       @relation("SavedJobs")
  companies     Company[]   @relation("CompanyAdmin")
  skills        UserSkill[]
  preferences   UserPreference?
  notifications Notification[]

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@map("users")
}

model Company {
  id            String    @id @default(cuid())
  name          String
  description   String    @db.Text
  logo          String?
  website       String?
  industry      Industry  @relation(fields: [industryId], references: [id])
  industryId    String
  size          CompanySize
  founded       Int?
  location      String
  
  jobs          Job[]
  admins        User[]    @relation("CompanyAdmin")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([industryId])
}

enum CompanySize {
  STARTUP
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

model Industry {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.Text
  companies   Company[]
  jobs        Job[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Skill {
  id          String      @id @default(cuid())
  name        String      @unique
  category    String
  users       UserSkill[]
  jobs        Job[]       @relation("JobSkills")

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([category])
}

model UserSkill {
  id          String    @id @default(cuid())
  userId      String
  skillId     String
  level       SkillLevel
  
  user        User      @relation(fields: [userId], references: [id])
  skill       Skill     @relation(fields: [skillId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, skillId])
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model UserPreference {
  id                String    @id @default(cuid())
  userId            String    @unique
  jobAlerts         Boolean   @default(true)
  alertFrequency    AlertFrequency @default(DAILY)
  desiredSalaryMin  Float?
  desiredSalaryMax  Float?
  preferredLocation String?
  preferredJobTypes EmploymentType[]
  preferredIndustries String[]
  
  user              User      @relation(fields: [userId], references: [id])

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum AlertFrequency {
  REALTIME
  DAILY
  WEEKLY
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  read        Boolean   @default(false)
  data        Json?     // Additional data specific to notification type
  
  user        User      @relation(fields: [userId], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId, read])
}

enum NotificationType {
  JOB_ALERT
  APPLICATION_UPDATE
  PROFILE_VIEW
  MESSAGE
  SYSTEM
}

enum UserRole {
  ADMIN
  EMPLOYER
  JOBSEEKER
}

model Job {
  id              String    @id @default(cuid())
  position        String
  description     String    @db.Text
  employmentType  EmploymentType
  location        String
  locationType    LocationType @default(ONSITE)
  benefits        String[]
  requirements    String[]
  responsibilities String[]
  tags            String[]
  salary          Json      // Store min and max salary range
  email           String
  link            String?
  
  status          JobStatus @default(ACTIVE)
  featured        Boolean   @default(false)
  
  companyId       String
  company         Company   @relation(fields: [companyId], references: [id])
  posterId        String
  poster          User      @relation("JobPoster", fields: [posterId], references: [id])
  
  industryId      String
  industry        Industry  @relation(fields: [industryId], references: [id])
  
  applications    JobApplication[]
  savedBy         User[]    @relation("SavedJobs")
  requiredSkills  Skill[]   @relation("JobSkills")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  expiresAt       DateTime?

  @@index([status])
  @@index([employmentType])
  @@index([locationType])
  @@index([companyId])
  @@index([industryId])
}

model JobApplication {
  id            String    @id @default(cuid())
  jobId         String
  applicantId   String
  coverLetter   String?   @db.Text
  resume        String    // URL to stored resume
  status        ApplicationStatus @default(PENDING)
  
  job           Job       @relation(fields: [jobId], references: [id])
  applicant     User      @relation(fields: [applicantId], references: [id])
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([jobId, applicantId])
}

enum JobStatus {
  DRAFT
  ACTIVE
  CLOSED
  EXPIRED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum LocationType {
  REMOTE
  HYBRID
  ONSITE
}

enum ApplicationStatus {
  PENDING
  REVIEWED
  SHORTLISTED
  REJECTED
  ACCEPTED
}

model Education {
  id            String    @id @default(cuid())
  userId        String
  name          String
  location      String
  degree        String
  major         String
  gpa           String?
  description   String?
  startDate     DateTime
  endDate       DateTime?
  
  user          User      @relation(fields: [userId], references: [id])
}

model Work {
  id            String    @id @default(cuid())
  userId        String
  name          String
  position      String
  location      String
  startDate     DateTime
  endDate       DateTime?
  experience    String
  
  user          User      @relation(fields: [userId], references: [id])
}

model Project {
  id            String    @id @default(cuid())
  userId        String
  name          String
  description   String
  link          String?
  tools         String[]
  
  user          User      @relation(fields: [userId], references: [id])
}